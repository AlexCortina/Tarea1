#include "librerias.h"

typedef struct tCell{
	int payload;
	void *next;
} Cell;

Cell* cola(Cell *root, int entrada){
	Cell *nuevo_nodo;
	nuevo_nodo = (Cell*)malloc(sizeof(Cell));
	nuevo_nodo->payload = entrada; //(*nuevo_nodo).payload = numero
	nuevo_nodo->next = NULL;
	Cell *cursor = root;
	while(cursor->next != NULL){
		cursor = (Cell*)cursor->next;
	}
	cursor->next = (void*)nuevo_nodo;
	return root;
}
void imprimeLista(Cell *root){
	printf("*");
	while((root = ((Cell*)root->next)) != NULL)
		printf("--> %d", root->payload);
	printf("\n");
}
Cell *pop(Cell *root){
	Cell *cursor = root;
	if(root->next == NULL) return root;
	while(((Cell*)cursor->next)->next != NULL){
			cursor = (Cell*)cursor->next;
	}
	free(cursor->next); //aquí borramos el contenido del ultimo nodo
	cursor->next = NULL; //aquí borramos la referencia a ese cuadrito (que ya no tiene nada)
	return root;
}
Cell *erase(Cell *root){
	while(root->next != NULL)
		pop(root);
	return root;
}
int dar_opcion(){
		int opcion;
		printf("Opciones:\n0, agrega nodo.\n1, borra ultimo numero.\n2, imprime lista.\n3, buscar.\n4, borrar algun numero.\n5, editar .\n6, salir.\n\nDame opción: ");	
		scanf("%d", &opcion);
	return opcion;
}

Cell *eliminar_x(int X, Cell *root){
	Cell *Q;
	Cell *T;
	bool BAND;
	Q = root;
	BAND = true;
	while((Q->payload) != X and BAND == true){
		if(Q->next != NULL){
			T = Q;	
			Q = (Cell*)Q->next;
		}else{
			BAND = false;
		}
	}
	if(BAND == false){
		printf("El elemento no fue encontrado");
	}else{
		if(root == Q)
			root = (Cell*)Q->next;
		else
			T->next = Q->next;
		free((void*)Q);
	}
	
	return root;
}

Cell *buscar(int X, Cell *root){
	Cell *Q;
	bool BAND;
	Q = root;
	BAND = true;
	while((Q->payload) != X and BAND == true){
		if(Q->next != NULL){	
			Q = (Cell*)Q->next;
		}else{
			BAND = false;
		}
	}
	if(BAND == false){
		printf("El elemento no fue encontrado");
	}else{
		printf("El elemento fue encontrado");
	}
	
	return root;
}
Cell *editar(int X, int nuevo_numero, Cell *root){
	Cell *Q;
	bool BAND;
	Q = root;
	BAND = true;
	while((Q->payload) != X and BAND == true){
		if(Q->next != NULL){	
			Q = (Cell*)Q->next;
		}else{
			BAND = false;
		}
	}
	if(BAND == false){
		printf("El elemento no fue encontrado\n");
	}else{
		Q->payload = nuevo_numero;
	}
	return root;
}
int main(int argc, char* argv[]){
	Cell root;
	bool es_indice_correcto;
	int nuevo_numero, X;
	int indice = 0;
	root.payload = -1;
	root.next = NULL;
	int opcion = dar_opcion();
	while(opcion != 6){
		if(opcion == 0){
			printf("Dame un numero: ");
			scanf("%d", &nuevo_numero);
			cola(&root, nuevo_numero);
			printf("\n");
			indice = indice+1;
		}else if(opcion == 1){
			pop(&root);
			indice = indice-1;
		}else if(opcion == 2){
			printf("\n");
			imprimeLista(&root);
		}else if(opcion == 3){
			printf("Elige el numero a buscar: ");
			scanf("%d", &X);
			buscar(X, &root);
			printf("\n");
		}else if(opcion == 4){
			printf("\n\nEsta es la lista:\n");
			imprimeLista(&root);
			printf("Elige el numero a eliminar: ");
			scanf("%d", &X);
			eliminar_x(X, &root);
			printf("\n");
			imprimeLista(&root);
			indice = indice-1;
		}else if(opcion == 5){
				imprimeLista(&root);
				printf("Ingrese numero a editar: ");
				scanf("%d", &X);
					printf("Dame un nuevo numero: ");
					scanf("%d", &nuevo_numero);
					editar(X, nuevo_numero, &root);
				imprimeLista(&root);
		}
		printf("\n");
		opcion = dar_opcion();
	}
	erase(&root);
	return 0;
}
//ldb.llvm.org/lldb-gdb.html
